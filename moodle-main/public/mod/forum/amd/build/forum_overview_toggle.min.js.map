{"version":3,"file":"forum_overview_toggle.min.js","sources":["../src/forum_overview_toggle.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Handle forum subscription/tracking toggling.\n *\n * @module     mod_forum/forum_overview_toggle\n * @copyright  2025 Sara Arjona <sara@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Notification from 'core/notification';\nimport {getString} from 'core/str';\nimport Repository from 'mod_forum/repository';\n\n/**\n * Register event listeners for the subscription/tracking toggles in the overview.\n * @param {HTMLElement} toggleElement The toggle root element\n */\nfunction registerEventListeners(toggleElement) {\n    toggleElement.addEventListener('change', () => {\n        if (toggleElement.dataset.type === 'forum-subscription-toggle') {\n            subscriptionToggleClickHandler(toggleElement);\n        }\n        if (toggleElement.dataset.type === 'forum-track-toggle') {\n            trackToggleClickHanldler(toggleElement);\n        }\n    });\n}\n\n/**\n * Toggle subscription element click handler.\n *\n * @param {HTMLElement} toggleElement The toggle element that was clicked\n * @return {Promise<void>}\n */\nasync function subscriptionToggleClickHandler(toggleElement) {\n    const forumId = toggleElement.dataset.forumid;\n    const newState = toggleElement.dataset.targetstate;\n    if (!forumId || !newState) {\n        return;\n    }\n    try {\n        const context = await Repository.setForumSubscriptionState(forumId, newState);\n        const newTargetState = !!context.userstate.subscribed;\n\n        updateSwitchState(\n            toggleElement,\n            newTargetState,\n            newTargetState ? 'subscribe' : 'unsubscribe',\n        );\n    } catch (error) {\n        Notification.exception(error);\n    }\n}\n\n/**\n * Toggle track element click handler.\n *\n * @param {HTMLElement} toggleElement The toggle element that was clicked\n * @return {Promise<void>}\n */\nasync function trackToggleClickHanldler(toggleElement) {\n    const forumId = toggleElement.dataset.forumid;\n    const newState = toggleElement.dataset.targetstate;\n    if (!forumId || !newState) {\n        return;\n    }\n    try {\n        const context = await Repository.setForumTrackingState(forumId, newState);\n        const newTargetState = !!context.userstate.tracked;\n\n        updateSwitchState(\n            toggleElement,\n            newTargetState,\n            newTargetState ? 'trackingon' : 'trackingoff',\n        );\n    } catch (error) {\n        Notification.exception(error);\n    }\n}\n\n/**\n * Update the switch state of the toggle element.\n *\n * @param {HTMLElement} toggleElement The toggle element to update\n * @param {Boolean} newTargetState The new target state to set (true for subscribed, false for unsubscribed)\n * @param {string} stringKey The string key to retrieve the label text\n * @return {Promise<void>}\n */\nasync function updateSwitchState(toggleElement, newTargetState, stringKey) {\n    toggleElement.dataset.targetstate = newTargetState ? 0 : 1;\n    const string = await getString(stringKey, 'mod_forum');\n    const label = toggleElement.closest('td').querySelector(`label[for=\"${toggleElement.id}\"] span`);\n    label.textContent = string;\n}\n\n/**\n * Initialize the forum overview toggle functionality.\n *\n * @param {string} toggleSelector The CSS selector for the toggle element to initialize\n * @throws {Error} If no elements are found with the provided selector\n */\nexport const init = (toggleSelector) => {\n    const toggleElement = document.querySelector(toggleSelector);\n    if (!toggleElement) {\n        // If the user cannot track/subscribe to any course forum, the toggle will not be present.\n        return;\n    }\n    registerEventListeners(toggleElement);\n};\n"],"names":["registerEventListeners","toggleElement","addEventListener","dataset","type","forumId","forumid","newState","targetstate","newTargetState","Repository","setForumSubscriptionState","userstate","subscribed","updateSwitchState","error","exception","subscriptionToggleClickHandler","setForumTrackingState","tracked","trackToggleClickHanldler","stringKey","string","closest","querySelector","id","textContent","toggleSelector","document"],"mappings":";;;;;;;cA+BSA,uBAAuBC,eAC5BA,cAAcC,iBAAiB,UAAU,KACF,8BAA/BD,cAAcE,QAAQC,qBAeYH,qBACpCI,QAAUJ,cAAcE,QAAQG,QAChCC,SAAWN,cAAcE,QAAQK,gBAClCH,UAAYE,0BAKPE,wBADgBC,oBAAWC,0BAA0BN,QAASE,WACnCK,UAAUC,WAE3CC,kBACIb,cACAQ,eACAA,eAAiB,YAAc,eAErC,MAAOM,6BACQC,UAAUD,QA9BnBE,CAA+BhB,eAEA,uBAA/BA,cAAcE,QAAQC,qBAsCMH,qBAC9BI,QAAUJ,cAAcE,QAAQG,QAChCC,SAAWN,cAAcE,QAAQK,gBAClCH,UAAYE,0BAKPE,wBADgBC,oBAAWQ,sBAAsBb,QAASE,WAC/BK,UAAUO,QAE3CL,kBACIb,cACAQ,eACAA,eAAiB,aAAe,eAEtC,MAAOM,6BACQC,UAAUD,QArDnBK,CAAyBnB,iCAiEtBa,kBAAkBb,cAAeQ,eAAgBY,WAC5DpB,cAAcE,QAAQK,YAAcC,eAAiB,EAAI,QACnDa,aAAe,kBAAUD,UAAW,aAC5BpB,cAAcsB,QAAQ,MAAMC,mCAA4BvB,cAAcwB,eAC9EC,YAAcJ,sMASHK,uBACX1B,cAAgB2B,SAASJ,cAAcG,gBACxC1B,eAILD,uBAAuBC"}