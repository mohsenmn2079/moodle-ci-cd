{"version":3,"file":"dialogue.min.js","sources":["../../../src/local/activitychooser/dialogue.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A type of dialogue used as for choosing options.\n *\n * @module     core_course/local/activitychooser/dialogue\n * @copyright  2019 Mihail Geshoski <mihail@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import {addIconToContainer} from 'core/loadingicon';\nimport {debounce} from 'core/utils';\nimport DialogueDom from 'core_course/local/activitychooser/dialoguedom';\nimport {end, arrowLeft, arrowRight, home, enter, space} from 'core/key_codes';\nimport Exporter from 'core_course/local/activitychooser/exporter';\nimport {getFirst} from 'core/normalise';\nimport {getString} from 'core/str';\nimport Modal from 'core/modal';\nimport * as ModalEvents from 'core/modal_events';\nimport Notification from 'core/notification';\nimport * as Repository from 'core_course/local/activitychooser/repository';\nimport selectors from 'core_course/local/activitychooser/selectors';\nimport * as Templates from 'core/templates';\nconst getPlugin = pluginName => import(pluginName);\n\n/**\n * Display the activity chooser modal.\n *\n * @method displayActivityChooser\n * @param {Promise} footerDataPromise Promise for the footer data.\n * @param {Promise} modulesDataPromise Promise for the modules data.\n */\nexport async function displayActivityChooserModal(\n    footerDataPromise,\n    modulesDataPromise,\n) {\n    // We want to show the modal instantly but loading whilst waiting for our data.\n    let bodyPromiseResolver;\n    const bodyPromise = new Promise(resolve => {\n        bodyPromiseResolver = resolve;\n    });\n\n    const footerData = await footerDataPromise;\n\n    const sectionModal = Modal.create({\n        body: bodyPromise,\n        title: getString('addresourceoractivity'),\n        footer: footerData.customfootertemplate,\n        large: true,\n        scrollable: false,\n        templateContext: {\n            classes: 'modchooser'\n        },\n        show: true,\n    });\n\n    try {\n        const modulesData = await modulesDataPromise;\n\n        if (!modulesData) {\n            return;\n        }\n\n        const modal = await sectionModal;\n        const dialogue = new ActivityChooserDialogue(modal, modulesData, footerData);\n\n        const templateData = await dialogue.exporter.getModChooserTemplateData(modulesData);\n        bodyPromiseResolver(await Templates.render('core_course/activitychooser', templateData));\n    } catch (error) {\n        const errorTemplateData = {\n            'errormessage': error.message\n        };\n        bodyPromiseResolver(\n            await Templates.render('core_course/local/activitychooser/error', errorTemplateData)\n        );\n        return;\n    }\n}\n\n/**\n * Display the module chooser.\n *\n * @deprecated since Moodle 5.1\n * @todo Remove the method in Moodle 6.0 (MDL-85655).\n * @method displayChooser\n * @param {Promise} modalPromise Our created modal for the section\n * @param {Array} sectionModules An array of all of the built module information\n * @param {Function} partialFavourite Partially applied function we need to manage favourite status\n * @param {Object} footerData Our base footer object.\n */\nexport const displayChooser = (modalPromise, sectionModules, partialFavourite, footerData) => {\n    window.console.warn(\n        'The displayChooser function is deprecated. ' +\n        'Please displayActivityChooserModal instead.'\n    );\n\n    // Register event listeners.\n    modalPromise.then(modal => {\n        new ActivityChooserDialogue(modal, sectionModules, footerData);\n        return modal;\n    }).catch(Notification.exception);\n};\n\n/**\n * Activity Chooser Dialogue class.\n *\n * @private\n */\nclass ActivityChooserDialogue {\n    /**\n     * Constructor for the ActivityChooserDialogue class.\n     * @param {Modal} modal The modal object.\n     * @param {Object} modulesData The data for the modules.\n     * @param {Object} footerData The data for the footer.\n     */\n    constructor(modal, modulesData, footerData) {\n        this.modal = modal;\n        this.dialogueDom = null; // We cannot init until we have the modal body loaded.\n        this.footerData = footerData;\n        this.exporter = new Exporter();\n        // This attribute marks when the tab content is dirty and needs to be refreshed when the user changes the tab.\n        // We don't want the content to be updated while the user is managing their favourites.\n        this.isFavouriteTabDirty = false;\n        // Make a map so we can quickly fetch a specific module's object for either rendering or searching.\n        this.mappedModules = new Map();\n        modulesData.forEach((module) => {\n            this.mappedModules.set(module.componentname + '_' + module.link, module);\n        });\n        this.init();\n    }\n\n    /**\n     * Initialise the activity chooser dialogue.\n     *\n     * @return {Promise} A promise that resolves when the modal is ready.\n     */\n    async init() {\n        const modalBody = getFirst(await this.modal.getBodyPromise());\n        this.dialogueDom = new DialogueDom(this, modalBody, this.exporter);\n        this.registerModalListenerEvents();\n        this.setupKeyboardAccessibility();\n        // We want to focus on the action select when the dialog is closed.\n        this.modal.getRoot().on(ModalEvents.hidden, () => {\n            this.modal.destroy();\n        });\n    }\n\n    /**\n     * Register chooser related event listeners.\n     *\n     * @returns {Promise} A promise that resolves when events are registered\n     */\n    async registerModalListenerEvents() {\n        const modalRoot = getFirst(this.modal.getRoot());\n\n        // Changing the tab should cancel any active search.\n        modalRoot.addEventListener(\n            'shown.bs.tab',\n            (event) => {\n                // The all tab has the search result, so we do not want to clear the search input.\n                if (event.target.closest(selectors.regions.allTabNav)) {\n                    return;\n                }\n                const searchInput = this.dialogueDom.getSearchInputElement();\n                if (searchInput.value.length > 0) {\n                    searchInput.value = \"\";\n                    this.toggleSearchResultsView(searchInput.value);\n                }\n            },\n        );\n\n        // Add the listener for clicks on the full modal.\n        modalRoot.addEventListener(\n            'click',\n            this.handleModalClick.bind(this),\n        );\n\n        // Add a listener for an input change in the activity chooser's search bar.\n        const searchInput = this.dialogueDom.getSearchInputElement();\n        searchInput.addEventListener(\n            'input',\n            debounce(\n                () => {\n                    this.toggleSearchResultsView(searchInput.value);\n                },\n                300,\n                {pending: true},\n            ),\n        );\n\n        this.dialogueDom.initBootstrapComponents();\n\n        // Handle focus when a new tab is shown.\n        modalRoot.addEventListener('shown.bs.tab', (event) => {\n            if (event.relatedTarget) {\n                this.dialogueDom.disableFocusAllChooserOptions(event.relatedTarget);\n            }\n            this.dialogueDom.initActiveTabNavigation();\n        });\n\n        // Update the favourite tab content when the user changes the tab.\n        modalRoot.addEventListener('shown.bs.tab', () => {\n            if (this.isFavouriteTabDirty && !this.dialogueDom.isFavoutiteTabActive()) {\n                this.refreshFavouritesTabContent();\n            }\n        });\n\n        this.dialogueDom.initActiveTabNavigation();\n\n        const modalFooter = getFirst(await this.modal.getFooterPromise());\n\n        // Add the listener for clicks on the footer.\n        modalFooter.addEventListener(\n            'click',\n            this.handleFooterClick.bind(this),\n        );\n    }\n\n    /**\n     * Handle the click event on the footer of the modal.\n     *\n     * @param {Object} event The event object\n     * @return {Promise} A promise that resolves when the event is handled\n     */\n    async handleFooterClick(event) {\n        if (this.footerData.footer === true) {\n            const footerjs = await getPlugin(this.footerData.customfooterjs);\n            await footerjs.footerClickListener(event, this.footerData, this.modal);\n        }\n    }\n\n    /**\n     * Modal click handler.\n     *\n     * @param {Object} event The event object\n     * @return {Promise} A promise that resolves when the event is handled\n     */\n    async handleModalClick(event) {\n        const target = event.target;\n\n        if (target.closest(selectors.actions.optionActions.showSummary)) {\n            this.handleShowSummary(target);\n        }\n\n        if (target.closest(selectors.actions.optionActions.manageFavourite)) {\n            await this.handleFavouriteClick(target);\n        }\n\n        // From the help screen go back to the module overview.\n        if (target.matches(selectors.actions.closeOption)) {\n            this.dialogueDom.hideModuleHelp(target.dataset.modname);\n        }\n\n        // The \"clear search\" button is triggered.\n        if (target.closest(selectors.actions.clearSearch)) {\n            this.handleClearSearch();\n        }\n    }\n\n    /**\n     * Show the summary of a module when the user clicks on the \"show summary\" button.\n     *\n     * @param {HTMLElement} target The target element that triggered the event\n     */\n    handleShowSummary(target) {\n        const module = this.dialogueDom.getClosestChooserOption(target);\n        const moduleName = module.dataset.modname;\n        const moduleData = this.mappedModules.get(moduleName);\n        // We need to know if the overall modal has a footer so we know when to show a real / vs fake footer.\n        moduleData.showFooter = this.modal.hasFooterContent();\n        this.dialogueDom.showModuleHelp(moduleData, this.modal);\n    }\n\n    /**\n     * Handle the favourite state of a module when the user clicks on the \"starred\" button.\n     *\n     * @param {HTMLElement} target The target element that triggered the event\n     * @return {Promise} A promise that resolves when the event is handled\n     */\n    async handleFavouriteClick(target) {\n        const caller = target.closest(selectors.actions.optionActions.manageFavourite);\n        const id = caller.dataset.id;\n        const name = caller.dataset.name;\n        const internal = caller.dataset.internal;\n        const isFavourite = caller.dataset.favourited;\n\n        // Switch on fave or not.\n        if (isFavourite === 'true') {\n            await Repository.unfavouriteModule(name, id);\n            this.updateFavouriteItemValue(internal, false);\n        } else {\n            await Repository.favouriteModule(name, id);\n            this.updateFavouriteItemValue(internal, true);\n        }\n    }\n\n    /**\n     * Handle a clear search action.\n     */\n    handleClearSearch() {\n        const searchInput = this.dialogueDom.getSearchInputElement();\n        searchInput.value = \"\";\n        searchInput.focus();\n        this.toggleSearchResultsView(searchInput.value);\n    }\n\n    /**\n     * Set up our tabindex information across the chooser.\n     *\n     * @method setupKeyboardAccessibility\n     */\n    setupKeyboardAccessibility() {\n        const mainElement = getFirst(this.modal.getModal());\n\n        mainElement.tabIndex = -1;\n\n        mainElement.addEventListener('keydown', (e) => {\n            const currentOption = this.dialogueDom.getClosestChooserOption(e.target);\n            if (currentOption === null) {\n                return;\n            }\n\n            // Check for enter/ space triggers for showing the help.\n            if (e.keyCode === enter || e.keyCode === space) {\n                if (e.target.matches(selectors.actions.optionActions.showSummary)) {\n                    e.preventDefault();\n                    this.handleShowSummary(e.target);\n                }\n            }\n\n            if (e.keyCode === arrowRight) {\n                e.preventDefault();\n                this.dialogueDom.focusNextChooserOption(currentOption);\n            }\n            if (e.keyCode === arrowLeft) {\n                e.preventDefault();\n                this.dialogueDom.focusPreviousChooserOption(currentOption);\n            }\n            if (e.keyCode === home) {\n                e.preventDefault();\n                this.dialogueDom.focusFirstChooserOption(currentOption);\n            }\n            if (e.keyCode === end) {\n                e.preventDefault();\n                this.dialogueDom.focusLastChooserOption(currentOption);\n            }\n        });\n    }\n\n    /**\n     * Toggle (display/hide) the search results depending on the value of the search query\n     *\n     * @method toggleSearchResultsView\n     * @param {String} searchQuery The search query\n     */\n    async toggleSearchResultsView(searchQuery) {\n        const searchResultsData = this.searchModules(searchQuery);\n\n        if (searchQuery.length > 0) {\n            await this.dialogueDom.refreshSearchResults(searchResultsData);\n            this.dialogueDom.showAllActivitiesTab(true);\n        } else {\n            this.dialogueDom.cleanSearchResults();\n        }\n    }\n\n    /**\n     * Return the list of modules which have a name or description that matches the given search term.\n     *\n     * @method searchModules\n     * @param {String} searchTerm The search term to match\n     * @return {Array}\n     */\n    searchModules(searchTerm) {\n        if (searchTerm === '') {\n            return this.mappedModules;\n        }\n        searchTerm = searchTerm.toLowerCase();\n        const searchResults = [];\n        this.mappedModules.forEach((activity) => {\n            const activityName = activity.title.toLowerCase();\n            const activityDesc = activity.help.toLowerCase();\n            if (activityName.includes(searchTerm) || activityDesc.includes(searchTerm)) {\n                searchResults.push(activity);\n            }\n        });\n\n        return searchResults;\n    }\n\n    /**\n     * Update the favourite item value in the mapped modules.\n     *\n     * @param {String} internal The internal name of the module.\n     * @param {Boolean} favourite Whether the module is a favourite or not.\n     * @return {Promise} A promise that resolves when the item is updated.\n     */\n    async updateFavouriteItemValue(internal, favourite) {\n        const moduleItem = this.mappedModules.find(({name}) => name === internal);\n        if (!moduleItem) {\n            return;\n        }\n        moduleItem.favourite = favourite;\n\n        this.dialogueDom.updateItemStarredIcons(internal, favourite);\n\n        if (this.dialogueDom.isFavoutiteTabActive()) {\n            this.isFavouriteTabDirty = true;\n        } else {\n            this.refreshFavouritesTabContent();\n        }\n    }\n\n    /**\n     * Refresh the favourites tab content.\n     *\n     * Note: this method will also hide the favourites tab if there are no favourite modules\n     * to keep the modal consistent.\n     *\n     * @return {Promise} A promise that resolves when the content is refreshed.\n     */\n    async refreshFavouritesTabContent() {\n        this.isFavouriteTabDirty = false;\n        const favouriteCount = this.mappedModules.filter(mod => mod.favourite === true).size;\n        this.dialogueDom.toggleFavouriteTabDisplay(favouriteCount > 0);\n        await this.dialogueDom.refreshFavouritesTabContent(this.mappedModules);\n    }\n}\n"],"names":["footerDataPromise","modulesDataPromise","bodyPromiseResolver","bodyPromise","Promise","resolve","footerData","sectionModal","Modal","create","body","title","footer","customfootertemplate","large","scrollable","templateContext","classes","show","modulesData","modal","dialogue","ActivityChooserDialogue","templateData","exporter","getModChooserTemplateData","Templates","render","error","errorTemplateData","message","modalPromise","sectionModules","partialFavourite","window","console","warn","then","catch","Notification","exception","constructor","dialogueDom","Exporter","isFavouriteTabDirty","mappedModules","Map","forEach","module","set","componentname","link","init","modalBody","this","getBodyPromise","DialogueDom","registerModalListenerEvents","setupKeyboardAccessibility","getRoot","on","ModalEvents","hidden","destroy","modalRoot","addEventListener","event","target","closest","selectors","regions","allTabNav","searchInput","getSearchInputElement","value","length","toggleSearchResultsView","handleModalClick","bind","pending","initBootstrapComponents","relatedTarget","disableFocusAllChooserOptions","initActiveTabNavigation","isFavoutiteTabActive","refreshFavouritesTabContent","getFooterPromise","handleFooterClick","footerjs","pluginName","customfooterjs","footerClickListener","actions","optionActions","showSummary","handleShowSummary","manageFavourite","handleFavouriteClick","matches","closeOption","hideModuleHelp","dataset","modname","clearSearch","handleClearSearch","moduleName","getClosestChooserOption","moduleData","get","showFooter","hasFooterContent","showModuleHelp","caller","id","name","internal","favourited","Repository","unfavouriteModule","updateFavouriteItemValue","favouriteModule","focus","mainElement","getModal","tabIndex","e","currentOption","keyCode","enter","space","preventDefault","arrowRight","focusNextChooserOption","arrowLeft","focusPreviousChooserOption","home","focusFirstChooserOption","end","focusLastChooserOption","searchQuery","searchResultsData","searchModules","refreshSearchResults","showAllActivitiesTab","cleanSearchResults","searchTerm","toLowerCase","searchResults","activity","activityName","activityDesc","help","includes","push","favourite","moduleItem","find","_ref","updateItemStarredIcons","favouriteCount","filter","mod","size","toggleFavouriteTabDisplay"],"mappings":"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"}