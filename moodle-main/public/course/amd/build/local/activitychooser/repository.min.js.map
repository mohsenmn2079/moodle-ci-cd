{"version":3,"file":"repository.min.js","sources":["../../../src/local/activitychooser/repository.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A javascript module to handle user AJAX actions.\n *\n * @module     core_course/local/activitychooser/repository\n * @copyright  2019 Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport ajax from 'core/ajax';\n\n// A promises map for caching specific section modules data.\nconst sectionsModulesPromises = new Map();\n\n// A promises map for caching a specific section footer data.\nconst sectionsFooterPromises = new Map();\n\n/**\n * Fetch all the information on modules we'll need in the activity chooser.\n *\n * @method activityModules\n * @param {Number} courseid What course to fetch the modules for\n * @param {Number} sectionnum What course section to fetch the modules for\n * @return {object} jQuery promise\n */\nexport const activityModules = (courseid, sectionnum) => {\n    const request = {\n        methodname: 'core_course_get_course_content_items',\n        args: {\n            courseid: courseid,\n            sectionnum: sectionnum,\n        },\n    };\n    return ajax.call([request])[0];\n};\n\n/**\n * Given a module name, module ID & the current course we want to specify that the module\n * is a users' favourite.\n *\n * @method favouriteModule\n * @param {String} modName Frankenstyle name of the component to add favourite\n * @param {int} modID ID of the module. Mainly for LTI cases where they have same / similar names\n * @return {object} jQuery promise\n */\nexport const favouriteModule = (modName, modID) => {\n    const request = {\n        methodname: 'core_course_add_content_item_to_user_favourites',\n        args: {\n            componentname: modName,\n            contentitemid: modID,\n        },\n    };\n    const promise = ajax.call([request])[0];\n    // After the promise is resolved, we need to invalidate the cache for the section.\n    return promise.then(() => {\n        sectionsModulesPromises.clear();\n        return true;\n    });\n};\n\n/**\n * Given a module name, module ID & the current course we want to specify that the module\n * is no longer a users' favourite.\n *\n * @method unfavouriteModule\n * @param {String} modName Frankenstyle name of the component to add favourite\n * @param {int} modID ID of the module. Mainly for LTI cases where they have same / similar names\n * @return {object} jQuery promise\n */\nexport const unfavouriteModule = (modName, modID) => {\n    const request = {\n        methodname: 'core_course_remove_content_item_from_user_favourites',\n        args: {\n            componentname: modName,\n            contentitemid: modID,\n        },\n    };\n\n    const promise = ajax.call([request])[0];\n    // After the promise is resolved, we need to invalidate the cache for the section.\n    return promise.then(() => {\n        sectionsModulesPromises.clear();\n        return true;\n    });\n};\n\n/**\n * Fetch all the information on modules we'll need in the activity chooser.\n *\n * @method fetchFooterData\n * @param {Number} courseid What course to fetch the data for\n * @param {Number} sectionid What section to fetch the data for\n * @return {object} jQuery promise\n */\nexport const fetchFooterData = (courseid, sectionid) => {\n    const request = {\n        methodname: 'core_course_get_activity_chooser_footer',\n        args: {\n            courseid: courseid,\n            sectionid: sectionid,\n        },\n    };\n    return ajax.call([request])[0];\n};\n\n/**\n * Fetch all the information on modules we'll need in the activity chooser.\n *\n * @method fetchSectionModules\n *\n * @private\n * @param {Number} courseId Course ID.\n * @param {Number} sectionNum Section number.\n * @param {Number} sectionReturnNum Section return.\n * @param {Number} beforeMod Before module number to be used in the module.\n * @return {Object} Tab data.\n */\nexport async function getModulesData(courseId, sectionNum, sectionReturnNum, beforeMod) {\n    const cacheKey = `${courseId}-${sectionNum}`;\n    if (!sectionsModulesPromises.has(cacheKey)) {\n        sectionsModulesPromises.set(\n            cacheKey,\n            new Promise((resolve) => {\n                resolve(activityModules(courseId, sectionNum));\n            })\n        );\n    }\n\n    const moduleData = await sectionsModulesPromises.get(cacheKey);\n\n    // Early return if there is no module data.\n    if (!moduleData) {\n        throw new Error('Cannot fetch module data');\n    }\n\n    // Apply the section num to all the module instance links.\n    return sectionMapper(\n        moduleData,\n        sectionNum,\n        sectionReturnNum,\n        beforeMod\n    );\n}\n\n/**\n * Given the web service data and an ID we want to make a deep copy\n * of the WS data then add on the section num to the addoption URL\n *\n * @method sectionMapper\n * @param {Object} webServiceData Our original data from the Web service call\n * @param {Number} sectionNum The number of the section we need to append to the links\n * @param {Number|null} sectionReturnNum The number of the section return we need to append to the links\n * @param {Number|null} beforeMod The ID of the cm we need to append to the links\n * @return {Array} [modules] with URL's built\n */\nfunction sectionMapper(webServiceData, sectionNum, sectionReturnNum, beforeMod) {\n    // We need to take a fresh deep copy of the original data as an object is a reference type.\n    const newData = JSON.parse(JSON.stringify(webServiceData));\n    newData.content_items.forEach((module) => {\n        module.link += '&section=' + sectionNum + '&beforemod=' + (beforeMod ?? 0);\n        if (sectionReturnNum) {\n            module.link += '&sr=' + sectionReturnNum;\n        }\n    });\n    return newData.content_items;\n}\n\n/**\n * Fetch the footer data for a specific section.\n *\n * @param {Number} courseId Course ID.\n * @param {Number} sectionNum Section number.\n * @return {Promise<Object>} Promise resolved with the footer data.\n */\nexport async function getModalFooterData(courseId, sectionNum) {\n    const cacheKey = `${courseId}-${sectionNum}`;\n    if (sectionsFooterPromises.has(cacheKey)) {\n        return sectionsFooterPromises.get(cacheKey);\n    }\n\n    sectionsFooterPromises.set(\n        cacheKey,\n        new Promise((resolve) => {\n            resolve(fetchFooterData(courseId, sectionNum));\n        })\n    );\n    return sectionsFooterPromises.get(cacheKey);\n}\n"],"names":["courseId","sectionNum","cacheKey","sectionsFooterPromises","has","get","set","Promise","resolve","fetchFooterData","sectionReturnNum","beforeMod","sectionsModulesPromises","activityModules","moduleData","Error","webServiceData","newData","JSON","parse","stringify","content_items","forEach","module","link","sectionMapper","Map","courseid","sectionnum","request","methodname","args","ajax","call","modName","modID","componentname","contentitemid","then","clear","sectionid"],"mappings":";;;;;;;0LA4LyCA,SAAUC,kBACzCC,mBAAcF,qBAAYC,eAC5BE,uBAAuBC,IAAIF,iBACpBC,uBAAuBE,IAAIH,iBAGtCC,uBAAuBG,IACnBJ,SACA,IAAIK,SAASC,UACTA,QAAQC,gBAAgBT,SAAUC,iBAGnCE,uBAAuBE,IAAIH,kDArEDF,SAAUC,WAAYS,iBAAkBC,iBACnET,mBAAcF,qBAAYC,YAC3BW,wBAAwBR,IAAIF,WAC7BU,wBAAwBN,IACpBJ,SACA,IAAIK,SAASC,UACTA,QAAQK,gBAAgBb,SAAUC,uBAKxCa,iBAAmBF,wBAAwBP,IAAIH,cAGhDY,iBACK,IAAIC,MAAM,4CAuBDC,eAAgBf,WAAYS,iBAAkBC,iBAE3DM,QAAUC,KAAKC,MAAMD,KAAKE,UAAUJ,wBAC1CC,QAAQI,cAAcC,SAASC,SAC3BA,OAAOC,MAAQ,YAAcvB,WAAa,eAAiBU,MAAAA,UAAAA,UAAa,GACpED,mBACAa,OAAOC,MAAQ,OAASd,qBAGzBO,QAAQI,cA5BRI,CACHX,WACAb,WACAS,iBACAC,wGAjIFC,wBAA0B,IAAIc,IAG9BvB,uBAAyB,IAAIuB,IAUtBb,gBAAkB,CAACc,SAAUC,oBAChCC,QAAU,CACZC,WAAY,uCACZC,KAAM,CACFJ,SAAUA,SACVC,WAAYA,oBAGbI,cAAKC,KAAK,CAACJ,UAAU,sEAYD,CAACK,QAASC,eAC/BN,QAAU,CACZC,WAAY,kDACZC,KAAM,CACFK,cAAeF,QACfG,cAAeF,eAGPH,cAAKC,KAAK,CAACJ,UAAU,GAEtBS,MAAK,KAChB1B,wBAAwB2B,SACjB,iCAakB,CAACL,QAASC,eACjCN,QAAU,CACZC,WAAY,uDACZC,KAAM,CACFK,cAAeF,QACfG,cAAeF,eAIPH,cAAKC,KAAK,CAACJ,UAAU,GAEtBS,MAAK,KAChB1B,wBAAwB2B,SACjB,YAYF9B,gBAAkB,CAACkB,SAAUa,mBAChCX,QAAU,CACZC,WAAY,0CACZC,KAAM,CACFJ,SAAUA,SACVa,UAAWA,mBAGZR,cAAKC,KAAK,CAACJ,UAAU"}